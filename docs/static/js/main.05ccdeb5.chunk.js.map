{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["operations","generateEmptyGrid","Array","from","length","fill","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","i","j","neighbors","forEach","x","y","newI","newJ","setTimeout","style","margin","display","onClick","marginLeft","marginTop","marginBottom","rows","index","push","Math","random","gridTemplateColumns","map","col","newGrid","key","height","width","backgroundColor","border","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMAQMA,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,IAGDC,EAAoB,WACxB,OAAOC,MAAMC,KAAK,CAAEC,OAhBN,KAgByB,kBAAMF,MAf/B,KAe8CG,KAAK,OAiGpDC,EA9FH,WAAO,IAAD,EACQC,mBAASN,KADjB,mBACTO,EADS,KACHC,EADG,OAEcF,oBAAS,GAFvB,mBAETG,EAFS,KAEAC,EAFA,KAIVC,EAAaC,mBACnBD,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAGhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAG,SAAAE,GAChB,IAD6B,IAAD,WACnBC,GACP,IAF0B,eAEjBC,GACP,IAAIC,EAAY,EAChBtB,EAAWuB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAON,EAAII,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EAtCf,IAsCiCC,GAAQ,GAAKA,EArC9C,MAsCAL,GAAaL,EAAES,GAAMC,OAGrBL,EAAY,GAAKA,EAAY,EAC/BH,EAASC,GAAGC,GAAK,EAEI,IAAdC,GAA+B,IAAZL,EAAEG,GAAGC,KAC/BF,EAASC,GAAGC,GAAK,IAbZA,EAAI,EAAGA,EAhCV,IAgCuBA,IAAM,EAA1BA,IADFD,EAAI,EAAGA,EAhCR,GAgCqBA,IAAM,EAA1BA,SAsBbQ,WAAWb,EAAe,QAE1B,IAEF,OACE,oCACE,yBAAKc,MAAO,CACVC,OAAQ,OACRC,QAAS,UAGT,4BAAQC,QAAS,WACfrB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,MAIFc,MAAO,CACLI,WAAY,MACZC,UAAW,OACXC,aAAc,SAEfzB,EAAU,OAAS,SAEtB,4BAAQsB,QAAS,WAGf,IADA,IAAMI,EAAO,GACJC,EAAQ,EAAGA,EAnFd,GAmF+BA,IACnCD,EAAKE,KAAKpC,MAAMC,KAAKD,MAnFjB,MAmFiC,kBAAOqC,KAAKC,SAlFtC,GAkFkE,EAAI,MAEnF/B,EAAQ2B,KANV,WAQA,4BAAQJ,QAAS,WACfvB,EAAQR,KACRU,GAAW,KAFb,YAIA,yBAAKkB,MAAO,CAAEE,QAAS,OAAQU,oBAAoB,UAAD,OA3F1C,IA2F0C,aAC/CjC,EAAKkC,KAAI,SAACN,EAAMhB,GAAP,OACRgB,EAAKM,KAAI,SAACC,EAAKtB,GAAN,OACP,yBACEW,QAAS,WACP,IAAMY,EAAU1B,YAAQV,GAAM,SAAAW,GAC5BA,EAASC,GAAGC,GAAKb,EAAKY,GAAGC,GAAK,EAAI,KAEpCZ,EAAQmC,IAEVC,IAAG,UAAKzB,EAAL,YAAUC,GACbQ,MAAO,CACLiB,OAAQ,GAAIC,MAAO,GAAIC,gBAAgC,IAAfxC,EAAKY,GAAGC,GAAW,QAAU,SACrE4B,OAAQ,yBCjGNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.05ccdeb5.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState } from 'react'\n\nimport produce from 'immer';\n\nconst numRows = 50;\nconst numCols = 100;\nconst randomSparsity = 0.7;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, 1],\n  [1, -1],\n  [1, 0],\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n];\n\nconst generateEmptyGrid = () => {\n  return Array.from({ length: numRows }, () => Array(numCols).fill(0));\n}\n\nconst App = () => {\n  const [grid, setGrid] = useState(generateEmptyGrid())\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef();\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    setGrid((g) => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n                neighbors += g[newI][newJ];\n              }\n            })\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][j] = 0;\n            }\n            else if (neighbors === 3 && g[i][j] === 0) {\n              gridCopy[i][j] = 1;\n            }\n          }\n        }\n      }\n      )\n    }\n    )\n    setTimeout(runSimulation, 100);\n  },\n    [],\n  )\n  return (\n    <>\n      <div style={{\n        margin: \"auto\",\n        display: \"table\"\n      }}>\n\n        <button onClick={() => {\n          setRunning(!running);\n          if (!running) {\n            runningRef.current = true;\n            runSimulation();\n          }\n        }\n        }\n          style={{\n            marginLeft: \"50%\",\n            marginTop: \"20px\",\n            marginBottom: \"20px\"\n          }}>\n          {running ? \"stop\" : \"start\"}\n        </button>\n        <button onClick={() => {\n\n          const rows = [];\n          for (let index = 0; index < numRows; index++) {\n            rows.push(Array.from(Array(numCols), () => (Math.random() > randomSparsity ? 1 : 0)))\n          }\n          setGrid(rows)\n        }}> random</button>\n        <button onClick={() => {\n          setGrid(generateEmptyGrid());\n          setRunning(false);\n        }}>  clear </button>\n        <div style={{ display: \"grid\", gridTemplateColumns: `repeat(${numCols}, 20px)` }}>\n          {grid.map((rows, i) =>\n            rows.map((col, j) =>\n              <div\n                onClick={() => {\n                  const newGrid = produce(grid, gridCopy => {\n                    gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                  })\n                  setGrid(newGrid);\n                }}\n                key={`${i}-${j}`}\n                style={{\n                  height: 20, width: 20, backgroundColor: grid[i][j] === 0 ? \"white\" : \"tomato\",\n                  border: \"solid 1px\"\n                }}></div>\n            ))}\n        </div>\n      </div>\n    </>\n  )\n}\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}